{"version":3,"sources":["webpack:///./src/app/blog/blog.module.ts","webpack:///./src/app/blog/blog/blog.component.ts","webpack:///./src/app/blog/post/post.component.ts","webpack:///./src/app/core/services/index.ts","webpack:///./src/app/core/services/post.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAyC;AACM;AACA;AACG;AACJ;AAEQ;AACA;AAiBtD;IAAA;IAA0B,CAAC;IAAd,UAAU;QAftB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,kEAAa;gBACb,kEAAa;aACd;YACD,OAAO,EAAE;gBACP,4DAAY;gBACZ,4DAAY,CAAC,QAAQ,CAAC;oBACpB,EAAE,IAAI,EAAE,eAAe,EAAE,SAAS,EAAE,kEAAa,EAAE;oBACnD,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,kEAAa,EAAE;iBACvC,CAAC;gBACF,2DAAc,CAAC,QAAQ,EAAE;gBACzB,+DAAa;aACd;SACF,CAAC;OACW,UAAU,CAAI;IAAD,iBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;ACxB2B;AACE;AAqCpD;IAGE,uBAAoB,UAAuB;QAAvB,eAAU,GAAV,UAAU,CAAa;QACzC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;IAC3C,CAAC;IAED,gCAAQ,GAAR;IACA,CAAC;IARU,aAAa;QAjCzB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,QAAQ,EAAE,4TAYT;;SAkBF,CAAC;+EAIgC,iEAAW;OAHhC,aAAa,CAUzB;IAAD,oBAAC;CAAA;AAVyB;;;;;;;;;;;;;;;;;;;;;ACtCwB;AACO;AACT;AAEI;AAoBpD;IAUE,uBACU,MAAc,EACd,KAAqB,EACrB,WAAwB;QAHlC,iBAIK;QAHK,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAgB;QACrB,gBAAW,GAAX,WAAW,CAAa;QAZlC,UAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAC9B,gEAAS,CAAC,gBAAM;YACd,YAAI,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;iBAC3C,IAAI,CAAC,0DAAG,CAAC,cAAO,CAAC,EAAE;gBAClB,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACjC,CAAC,CAAC,CAAC;QAHL,CAGK,CACN,CACF,CAAC;IAME,CAAC;IAEL,gCAAQ,GAAR;IACA,CAAC;IAjBU,aAAa;QAlBzB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,QAAQ,EAAE,0DAET;;SAaF,CAAC;+EAYkB,sDAAM;YACP,8DAAc;YACR,iEAAW;OAbvB,aAAa,CAmBzB;IAAD,oBAAC;CAAA;AAnByB;;;;;;;;;;;;;ACxB1B;AAAA;AAAA;AAAA;AAA+B;;;;;;;;;;;;;;;;;;;;ACAY;AACO;AACb;AAOrC;IAEE,qBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAEzC,6BAAO,GAAP,UAAQ,MAAc;QACpB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,oBAAkB,MAAM,QAAK,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC,CAAC;IAChF,CAAC;IAED,8BAAQ,GAAR;QACE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAoB,qBAAqB,CAAC;aAC3D,IAAI,CAAC,0DAAG,CAAC,cAAI,IAAI,WAAI,CAAC,KAAK,EAAV,CAAU,CAAC,CAAC,CAAC;IACnC,CAAC;IAXU,WAAW;QAHvB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;+EAG0B,+DAAU;OAFzB,WAAW,CAYvB;IAAD,kBAAC;CAAA;AAZuB","file":"blog-blog-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { MatListModule } from '@angular/material';\nimport { MarkdownModule } from 'ngx-markdown';\n\nimport { BlogComponent } from './blog/blog.component';\nimport { PostComponent } from './post/post.component';\n\n@NgModule({\n  declarations: [\n    BlogComponent,\n    PostComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      { path: 'posts/:postId', component: PostComponent },\n      { path: '', component: BlogComponent }\n    ]),\n    MarkdownModule.forChild(),\n    MatListModule\n  ]\n})\nexport class BlogModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { PostService } from 'src/app/core/services';\nimport { Observable } from 'rxjs';\nimport { Post } from 'src/app/core/models';\n\n@Component({\n  selector: 'app-blog',\n  template: `\n    <h2>Posts</h2>\n\n    <mat-list>\n      <mat-list-item *ngFor=\"let post of posts$ | async\">\n        <h2 mat-line>\n          <a [routerLink]=\"['/blog/posts', post.id]\">{{post.title}}</a>\n        </h2>\n\n        <p mat-line> {{post.dateCreated | date}} </p>\n      </mat-list-item>\n    </mat-list>\n  `,\n  styles: [\n    `\n    :host {\n      width: 80%;\n    }\n\n    a {\n      font-size: 36px;\n      color: black;\n      white-space: initial;\n    }\n\n    :host /deep/ .mat-list-item { \n      font-size: 24px;\n    }\n    `\n  ]\n})\nexport class BlogComponent implements OnInit {\n  posts$: Observable<Post[]>;\n\n  constructor(private postServce: PostService) {\n    this.posts$ = this.postServce.getPosts();\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { tap, switchMap } from 'rxjs/operators';\n\nimport { PostService } from 'src/app/core/services';\n\n@Component({\n  selector: 'app-post',\n  template: `\n    <markdown [data]=\"post$ | async\"></markdown>\n  `,\n  styles: [\n    `\n    :host {\n      display: flex;\n      width: 80%;\n    }\n\n    markdown {\n      width: 100%;\n    }\n    `\n  ]\n})\nexport class PostComponent implements OnInit {\n  post$ = this.route.paramMap.pipe(\n    switchMap(params => \n      this.postService.getPost(params.get('postId'))\n        .pipe(tap(() => {}, () => {\n          this.router.navigate(['/404']);\n        }))\n    )\n  );\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private postService: PostService\n  ) { }\n\n  ngOnInit() {\n  }\n\n}\n","export * from './post.service';","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\n\nimport { Post } from '../models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostService {\n\n  constructor(private http: HttpClient) { }\n\n  getPost(postId: string) {\n    return this.http.get(`/content/posts/${postId}.md`, { responseType: 'text' });\n  }\n\n  getPosts() {\n    return this.http.get<{ posts: Post[] }>(`/content/posts.json`)\n      .pipe(map(data => data.posts));\n  }\n}\n"],"sourceRoot":""}